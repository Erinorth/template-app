// ‡πÑ‡∏ü‡∏•‡πå: resources/js/pages/citizens/columns.ts
import type { ComputedRef } from 'vue'
import { useColumnBuilder, type ColumnConfig, type ColumnCallbacks } from '@/composables/useColumnBuilder'
import type { Citizen } from './types'
import { 
  CITIZEN_CUSTOM_ACTIONS, 
  CITIZEN_COLUMN_CLASSES,
  CITIZEN_DISPLAY_FIELDS,
} from './constants'

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á columns configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Citizens table
 * ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö custom actions ‡πÅ‡∏•‡∏∞ responsive design
 */
export function useCitizenColumns(
  onSort: (field: string) => void,
  onView: (citizen: Citizen) => void,
  onEdit: (citizen: Citizen) => void,
  onDelete: (citizen: Citizen) => void,
  onCustomAction: (actionKey: string, citizen: Citizen) => void
) {
  
  const { createColumns } = useColumnBuilder<Citizen>()

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î column configurations
  const columnConfigs: ColumnConfig<Citizen>[] = [
    // Column ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö expand rows
    { 
      type: 'expand' 
    },
    
    // ID column (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ)
    {
      type: 'id',
      key: 'id',
      header: 'ID',
      sortable: true,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.ID
    },
    
    // ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ)
    {
      type: 'text',
      key: CITIZEN_DISPLAY_FIELDS.ID_FIELD as keyof Citizen, // ‡πÄ‡∏û‡∏¥‡πà‡∏° type assertion
      header: '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
      sortable: true,
      enableHiding: false, // ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô
      className: CITIZEN_COLUMN_CLASSES.CITIZEN_ID
    },
    
    // ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    {
      type: 'date',
      key: CITIZEN_DISPLAY_FIELDS.DATE_FIELD as keyof Citizen, // ‡πÄ‡∏û‡∏¥‡πà‡∏° type assertion
      header: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
      sortable: true,
      includeTime: false,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.DATE
    },
    
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    {
      type: 'text',
      key: CITIZEN_DISPLAY_FIELDS.REMARK_FIELD as keyof Citizen, // ‡πÄ‡∏û‡∏¥‡πà‡∏° type assertion
      header: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      sortable: true,
      maxLength: 50,
      placeholder: '-', // ‡πÄ‡∏û‡∏¥‡πà‡∏° placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.REMARK
    },
    
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    {
      type: 'date',
      key: 'created_at',
      header: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠',
      sortable: true,
      includeTime: true,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.CREATED_AT
    },

    // Actions column
    {
      type: 'action',
      idKey: 'id',
      nameKey: CITIZEN_DISPLAY_FIELDS.ID_FIELD,
      enableCopy: true,
      enableView: true,
      enableEdit: true,
      enableDelete: true,
      enableHiding: false,
      customActions: CITIZEN_CUSTOM_ACTIONS
    }
  ]

  // Callback functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö column actions
  const callbacks: ColumnCallbacks<Citizen> = {
    onSort,
    onView,
    onEdit,
    onDelete,
    onCustomAction
  }

  // Log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
  console.log('üìã Citizen columns: Created columns configuration', {
    totalColumns: columnConfigs.length,
    customActions: CITIZEN_CUSTOM_ACTIONS.length,
    searchableFields: Object.values(CITIZEN_DISPLAY_FIELDS)
  })

  return createColumns(columnConfigs, callbacks)
}
