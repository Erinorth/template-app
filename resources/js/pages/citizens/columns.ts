/**
 * ‡πÑ‡∏ü‡∏•‡πå: resources/js/pages/citizens/columns.ts
 * ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á columns configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á citizens
 */

import { useColumnBuilder, type ColumnConfig, type ColumnCallbacks } from '@/composables/useColumnBuilder'
import type { Citizen } from './types'
import { 
  CITIZEN_CUSTOM_ACTIONS, 
  CITIZEN_COLUMN_CLASSES,
  CITIZEN_DISPLAY_FIELDS,
} from './constants'

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á columns configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á citizens
 * @param onSort - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
 * @param onView - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param onEdit - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 * @param onDelete - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏•‡∏ö
 * @param onCustomAction - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î custom action
 * @returns columns configuration
 */
export function useCitizenColumns(
  onSort: (field: string) => void,
  onView: (citizen: Citizen) => void,
  onEdit: (citizen: Citizen) => void,
  onDelete: (citizen: Citizen) => void,
  onCustomAction: (actionKey: string, citizen: Citizen) => void
) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á column builder
  const { createColumns } = useColumnBuilder<Citizen>()

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ column configurations
  const columnConfigs: ColumnConfig[] = [
    // Expand column ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    { 
      type: 'expand' 
    },
    
    // ID column
    {
      type: 'id',
      key: 'id' as string,
      header: 'ID',
      sortable: true,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.ID
    },
    
    // ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
    {
      type: 'text',
      key: CITIZEN_DISPLAY_FIELDS.ID_FIELD as string,
      header: '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
      sortable: true,
      enableHiding: false, // ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πà‡∏≠‡∏ô column ‡∏ô‡∏µ‡πâ
      className: CITIZEN_COLUMN_CLASSES.CITIZEN_ID
    },
    
    // ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    {
      type: 'date',
      key: CITIZEN_DISPLAY_FIELDS.DATE_FIELD as string,
      header: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
      sortable: true,
      includeTime: false,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.DATE
    },
    
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ - ‡∏•‡∏ö placeholder ‡∏≠‡∏≠‡∏Å
    {
      type: 'text',
      key: CITIZEN_DISPLAY_FIELDS.REMARK_FIELD as string,
      header: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      sortable: true,
      maxLength: 50,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.REMARK
    },
    
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    {
      type: 'date',
      key: 'created_at' as string,
      header: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠',
      sortable: true,
      includeTime: true,
      enableHiding: true,
      className: CITIZEN_COLUMN_CLASSES.CREATED_AT
    },

    // Action column
    {
      type: 'action',
      idKey: 'id' as string,
      nameKey: CITIZEN_DISPLAY_FIELDS.ID_FIELD as string,
      enableCopy: true,
      enableView: true,
      enableEdit: true,
      enableDelete: true,
      enableHiding: false,
      customActions: CITIZEN_CUSTOM_ACTIONS
    }
  ]

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ callbacks
  const callbacks: ColumnCallbacks<Citizen> = {
    onSort,
    onView,
    onEdit,
    onDelete,
    onCustomAction
  }

  // Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  console.log('üìã Citizen columns: Created columns configuration', {
    totalColumns: columnConfigs.length,
    customActions: CITIZEN_CUSTOM_ACTIONS.length,
    searchableFields: Object.values(CITIZEN_DISPLAY_FIELDS)
  })

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ return columns
  return createColumns(columnConfigs, callbacks)
}
