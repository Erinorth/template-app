// ‡πÑ‡∏ü‡∏•‡πå: resources/js/pages/citizens/use.ts
import { useCrudOperations, type CustomAction } from '@/composables/useCrudOperations'
import { useExpandedContent } from '@/composables/useExpandedContent'
import { toast } from 'vue-sonner'
import { router } from '@inertiajs/vue3'
import type { Citizen } from './types'
import { CITIZEN_DISPLAY_FIELDS } from './constants'

/**
 * Composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Citizen operations
 */
export function useCitizens() {
  console.log('üìã useCitizens: Initializing citizen operations')

  // ======= CUSTOM ACTIONS =======

  /**
   * Custom action: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£
   */
  const generateCardAction: CustomAction<Citizen> = {
    key: 'generateCard',
    label: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£',
    handler: async (citizen, options) => {
      console.log('üé¥ Generating card for citizen:', citizen.id)
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£
      router.post(route('citizen-cards.store'), {
        citizen_id: citizen.id
      }, {
        onSuccess: () => {
          toast.success(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${citizen.citizen_id}`)
        }
      })
    },
    defaultOptions: {
      showLoading: true,
      loadingMessage: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£...',
      confirm: true,
      confirmMessage: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'
    }
  }

  /**
   * Custom action: ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
   */
  const viewHistoryAction: CustomAction<Citizen> = {
    key: 'viewHistory',
    label: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
    handler: async (citizen) => {
      console.log('üìú Viewing history for citizen:', citizen.id)
      router.get(route('citizens.history', citizen.id))
    },
    defaultOptions: {
      showLoading: false
    }
  }

  /**
   * Custom action: ‡∏û‡∏¥‡∏°‡∏û‡πå
   */
  const printAction: CustomAction<Citizen> = {
    key: 'print',
    label: '‡∏û‡∏¥‡∏°‡∏û‡πå',
    handler: async (citizen) => {
      console.log('üñ®Ô∏è Printing citizen:', citizen.id)
      
      // Simulate print
      window.open(route('citizens.print', citizen.id), '_blank')
      toast.success('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß')
    },
    defaultOptions: {
      showLoading: false
    }
  }

  /**
   * Custom action: ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel
   */
  const exportAction: CustomAction<Citizen> = {
    key: 'export',
    label: '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel',
    handler: async (citizen) => {
      console.log('üìä Exporting citizen to Excel:', citizen.id)
      
      router.get(route('citizens.export', { ids: [citizen.id] }), {}, {
        onSuccess: () => {
          toast.success('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        }
      })
    },
    defaultOptions: {
      showLoading: true,
      loadingMessage: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'
    }
  }

  // ======= CRUD OPERATIONS =======

  const crud = useCrudOperations<Citizen>({
    routePrefix: 'citizens',
    entityDisplayName: '‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
    displayField: CITIZEN_DISPLAY_FIELDS.ID_FIELD as keyof Citizen,
    
    customActions: {
      generateCard: generateCardAction,
      viewHistory: viewHistoryAction,
      print: printAction,
      export: exportAction
    },
    
    messages: {
      deleteConfirm: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ',
      deleteSuccess: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      deleteError: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
      unknownAction: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    },
    
    deleteOptions: {
      preserveScroll: true,
      preserveState: true,
      confirm: true
    },
    
    enableLogging: true
  })

  // ======= EXPANDED CONTENT =======

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏ó‡∏ô array
  const { createExpandedContent } = useExpandedContent<Citizen>({
    fields: [
      { key: 'id', label: 'ID', formatter: (v: any) => `#${v}` },
      { key: 'citizen_id', label: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', className: 'font-mono' },
      { key: 'birth_date', label: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î' },
      { key: 'remark', label: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏', formatter: (v: any) => v || '-' },
      { key: 'created_at', label: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠' },
      { key: 'updated_at', label: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠' }
    ]
  })

  // ======= EXPORTS =======

  console.log('‚úÖ useCitizens: Citizen operations initialized', {
    customActionsCount: Object.keys(crud).length,
    enabledLogging: true
  })

  return {
    // CRUD operations
    viewCitizen: crud.viewItem,
    editCitizen: crud.editItem,
    deleteCitizen: crud.deleteItem,
    handleCustomAction: crud.handleCustomAction,
    getDisplayName: crud.getDisplayName,
    
    // State
    isDeleting: crud.isDeleting,
    isProcessing: crud.isProcessing,
    currentAction: crud.currentAction,
    
    // Expanded content
    createExpandedContent
  }
}
