// ‡πÑ‡∏ü‡∏•‡πå: resources/js/composables/useBirthDateValidation.ts
// Composable ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Birth Date validation

import { type Ref } from 'vue'
import { useFieldValidation, type ValidationRule, type FieldValidation } from './useFormValidation'
import { isPastDate } from '@/lib/formatters/date-formatter'

/**
 * Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Birth Date validation
 */
export interface BirthDateValidationOptions {
  /** Field ‡πÄ‡∏õ‡πá‡∏ô required ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true) */
  required?: boolean
  
  /** Custom required message */
  requiredMessage?: string
  
  /** Validate ‡πÄ‡∏°‡∏∑‡πà‡∏≠ value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (default: true) */
  validateOnChange?: boolean
  
  /** ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (default: 1900-01-01) */
  minDate?: Date | string
  
  /** ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (default: today) */
  maxDate?: Date | string
  
  /** ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (years) */
  minAge?: number
  
  /** ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (years) (default: 150) */
  maxAge?: number
  
  /** Custom validation rules ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */
  additionalRules?: ValidationRule<string>[]
}

/**
 * Composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Birth Date validation
 * 
 * @example
 * const birthDate = ref('')
 * const validation = useBirthDateValidation(birthDate, {
 *   minAge: 18,
 *   maxAge: 100
 * })
 */
export function useBirthDateValidation(
  value: Ref<string>,
  options: BirthDateValidationOptions = {}
): FieldValidation {
  console.log('üìÖ useBirthDateValidation: Initializing', {
    required: options.required ?? true,
    minAge: options.minAge,
    maxAge: options.maxAge ?? 150,
    validateOnChange: options.validateOnChange ?? true
  })

  // Default values
  const minDate = options.minDate ? new Date(options.minDate) : new Date('1900-01-01')
  const maxDate = options.maxDate ? new Date(options.maxDate) : new Date()
  const maxAge = options.maxAge ?? 150

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á validation rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Birth Date
  const rules: ValidationRule<string>[] = [
    // Rule 1: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
    {
      name: 'past-date',
      validator: (val: string) => {
        if (!val) return true // Skip ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å catch ‡πÉ‡∏ô required)
        return isPastDate(val)
      },
      message: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï'
    },
    
    // Rule 2: ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏µ 1900
    {
      name: 'min-date',
      validator: (val: string) => {
        if (!val) return true
        const birthDate = new Date(val)
        return birthDate >= minDate
      },
      message: `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á ${minDate.getFullYear()}`
    },
    
    // Rule 3: ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    {
      name: 'max-date',
      validator: (val: string) => {
        if (!val) return true
        const birthDate = new Date(val)
        return birthDate <= maxDate
      },
      message: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
    },
    
    // Rule 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    ...(options.minAge ? [{
      name: 'min-age',
      validator: (val: string) => {
        if (!val) return true
        const birthDate = new Date(val)
        const age = calculateAge(birthDate)
        return age >= options.minAge!
      },
      message: `‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${options.minAge} ‡∏õ‡∏µ`
    }] : []),
    
    // Rule 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    {
      name: 'max-age',
      validator: (val: string) => {
        if (!val) return true
        const birthDate = new Date(val)
        const age = calculateAge(birthDate)
        return age <= maxAge
      },
      message: `‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${maxAge} ‡∏õ‡∏µ (‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•)`
    },
    
    // Rule 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô valid date
    {
      name: 'valid-date',
      validator: (val: string) => {
        if (!val) return true
        const date = new Date(val)
        return !isNaN(date.getTime())
      },
      message: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    }
  ]

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° additional rules ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (options.additionalRules) {
    rules.push(...options.additionalRules)
  }

  // ‡πÉ‡∏ä‡πâ useFieldValidation ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö rules ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  return useFieldValidation(value, {
    required: options.required ?? true,
    requiredMessage: options.requiredMessage || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
    rules,
    validateOnChange: options.validateOnChange ?? true,
    isEmpty: (val) => !val || val.trim() === ''
  })
}

/**
 * Helper function: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
 */
function calculateAge(birthDate: Date): number {
  const today = new Date()
  let age = today.getFullYear() - birthDate.getFullYear()
  const monthDiff = today.getMonth() - birthDate.getMonth()

  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--
  }

  return age
}

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡πÅ‡∏ö‡∏ö standalone
 */
export function validateBirthDate(value: string, options: BirthDateValidationOptions = {}): {
  isValid: boolean
  error: string
} {
  if (!value || value.trim() === '') {
    return {
      isValid: !options.required,
      error: options.required ? (options.requiredMessage || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î') : ''
    }
  }

  const birthDate = new Date(value)

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö valid date
  if (isNaN(birthDate.getTime())) {
    return {
      isValid: false,
      error: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
  if (!isPastDate(birthDate)) {
    return {
      isValid: false,
      error: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï'
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
  const minDate = options.minDate ? new Date(options.minDate) : new Date('1900-01-01')
  if (birthDate < minDate) {
    return {
      isValid: false,
      error: `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á ${minDate.getFullYear()}`
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
  const age = calculateAge(birthDate)
  const maxAge = options.maxAge ?? 150

  if (options.minAge && age < options.minAge) {
    return {
      isValid: false,
      error: `‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${options.minAge} ‡∏õ‡∏µ`
    }
  }

  if (age > maxAge) {
    return {
      isValid: false,
      error: `‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${maxAge} ‡∏õ‡∏µ`
    }
  }

  return {
    isValid: true,
    error: ''
  }
}
