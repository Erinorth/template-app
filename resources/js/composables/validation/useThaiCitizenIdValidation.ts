// ‡πÑ‡∏ü‡∏•‡πå: resources/js/composables/useThaiCitizenIdValidation.ts
// Composable ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thai Citizen ID validation

import { type Ref } from 'vue'
import { useFieldValidation, type ValidationRule, type FieldValidation } from './useFormValidation'
import { isValidThaiCitizenId, cleanThaiCitizenId } from '@/lib/formatters/thai-id-formatter'

/**
 * Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thai Citizen ID validation
 */
export interface ThaiCitizenIdValidationOptions {
  /** Field ‡πÄ‡∏õ‡πá‡∏ô required ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true) */
  required?: boolean
  
  /** Custom required message */
  requiredMessage?: string
  
  /** Validate ‡πÄ‡∏°‡∏∑‡πà‡∏≠ value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (default: false) */
  validateOnChange?: boolean
  
  /** Debounce time (milliseconds) */
  debounce?: number
  
  /** Custom validation rules ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */
  additionalRules?: ValidationRule<string>[]
}

/**
 * Composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thai Citizen ID validation
 * 
 * @example
 * const citizenId = ref('')
 * const validation = useThaiCitizenIdValidation(citizenId)
 * 
 * // ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô component
 * <Input v-model="citizenId" :error="validation.error.value" @blur="validation.touch()" />
 */
export function useThaiCitizenIdValidation(
  value: Ref<string>,
  options: ThaiCitizenIdValidationOptions = {}
): FieldValidation {
  console.log('üÜî useThaiCitizenIdValidation: Initializing', {
    required: options.required ?? true,
    validateOnChange: options.validateOnChange,
    hasAdditionalRules: !!options.additionalRules
  })

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á validation rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thai Citizen ID
  const rules: ValidationRule<string>[] = [
    // Rule 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 13 ‡∏´‡∏•‡∏±‡∏Å
    {
      name: 'length',
      validator: (val: string) => {
        const cleaned = cleanThaiCitizenId(val)
        return cleaned.length === 13
      },
      message: (val: string) => {
        const cleaned = cleanThaiCitizenId(val)
        return `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 13 ‡∏´‡∏•‡∏±‡∏Å (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${cleaned.length} ‡∏´‡∏•‡∏±‡∏Å)`
      }
    },
    
    // Rule 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checksum
    {
      name: 'checksum',
      validator: (val: string) => {
        const cleaned = cleanThaiCitizenId(val)
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 13 ‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° rule ‡∏ô‡∏µ‡πâ (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å catch ‡πÉ‡∏ô rule ‡πÅ‡∏£‡∏Å)
        if (cleaned.length !== 13) return true
        
        return isValidThaiCitizenId(cleaned)
      },
      message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (checksum ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)'
    }
  ]

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° additional rules ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (options.additionalRules) {
    rules.push(...options.additionalRules)
  }

  // ‡πÉ‡∏ä‡πâ useFieldValidation ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö rules ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  return useFieldValidation(value, {
    required: options.required ?? true,
    requiredMessage: options.requiredMessage || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
    rules,
    validateOnChange: options.validateOnChange ?? false,
    debounce: options.debounce,
    isEmpty: (val) => {
      const cleaned = cleanThaiCitizenId(val)
      return cleaned.length === 0
    }
  })
}

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡πÅ‡∏ö‡∏ö standalone
 * (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ reactive ref)
 */
export function validateThaiCitizenId(value: string): {
  isValid: boolean
  error: string
} {
  const cleaned = cleanThaiCitizenId(value)

  if (cleaned.length === 0) {
    return {
      isValid: false,
      error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'
    }
  }

  if (cleaned.length !== 13) {
    return {
      isValid: false,
      error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 13 ‡∏´‡∏•‡∏±‡∏Å (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${cleaned.length} ‡∏´‡∏•‡∏±‡∏Å)`
    }
  }

  if (!isValidThaiCitizenId(cleaned)) {
    return {
      isValid: false,
      error: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    }
  }

  return {
    isValid: true,
    error: ''
  }
}
