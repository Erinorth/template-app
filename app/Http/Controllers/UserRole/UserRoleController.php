<?php

namespace App\Http\Controllers\UserRole;

use App\Http\Controllers\Controller;
use App\Http\Requests\UserRole\AssignRoleRequest;
use App\Models\User;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Log;
use Inertia\Inertia;
use Spatie\Permission\Models\Role;

class UserRoleController extends Controller
{
    use AuthorizesRequests;

    public function __construct()
    {
        $this->middleware(['auth', 'verified']);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡πâ‡∏ß‡∏¢ middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à
        $this->middleware(function ($request, $next) {
            $user = auth()->user();
            
            Log::info('üîç UserRoleController - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á', [
                'user_id' => $user->id,
                'user_name' => $user->name,
                'user_roles' => $user->getRoleNames()->toArray(),
                'route' => $request->route()->getName()
            ]);
            
            if (!$user->hasAnyRole(['super admin', 'admin'])) {
                Log::warning('üö´ UserRoleController - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á', [
                    'user_id' => $user->id,
                    'user_roles' => $user->getRoleNames()->toArray()
                ]);
                abort(403, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
            }
            
            Log::info('‚úÖ UserRoleController - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ');
            return $next($request);
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ role ‡∏Ç‡∏≠‡∏á users
     */
    public function index(Request $request)
    {
        $currentUser = auth()->user();
        
        Log::info('üìã UserRoleController - ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ User Roles', [
            'user_id' => $currentUser->id,
            'user_name' => $currentUser->name,
            'search_term' => $request->get('search'),
            'page' => $request->get('page', 1)
        ]);
        
        $query = User::with(['roles'])->orderBy('name');
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        if ($currentUser->hasRole('admin') && !$currentUser->hasRole('super admin')) {
            $query->where('department', $currentUser->department);
            Log::info('üè¢ UserRoleController - ‡∏Å‡∏£‡∏≠‡∏á users ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', [
                'admin_department' => $currentUser->department
            ]);
        }
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° keyword
        if ($request->filled('search')) {
            $search = $request->get('search');
            $query->where(function ($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('email', 'like', "%{$search}%")
                  ->orWhere('department', 'like', "%{$search}%")
                  ->orWhere('position', 'like', "%{$search}%");
            });
            
            Log::info('üîç UserRoleController - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ users', [
                'search_term' => $search
            ]);
        }
        
        $users = $query->paginate(15)->withQueryString();
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î roles ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° permission
        $availableRoles = $this->getAvailableRoles();
        
        Log::info('üìä UserRoleController - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•', [
            'total_users' => $users->total(),
            'current_page_users' => $users->count(),
            'available_roles_count' => $availableRoles->count(),
            'available_roles' => $availableRoles->pluck('name')->toArray()
        ]);
        
        return Inertia::render('UserRoles/Index', [
            'users' => $users,
            'availableRoles' => $availableRoles,
            'filters' => $request->only(['search']),
            'currentUser' => [
                'id' => $currentUser->id,
                'name' => $currentUser->name,
                'roles' => $currentUser->getRoleNames()->toArray(),
                'is_super_admin' => $currentUser->hasRole('super admin'),
                'is_admin' => $currentUser->hasRole('admin')
            ]
        ]);
    }
    
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏Ç‡∏≠‡∏á user
     */
    public function updateRole(AssignRoleRequest $request, User $user)
    {
        $currentUser = auth()->user();
        $newRoleName = $request->validated()['role'];
        
        Log::info('üîÑ UserRoleController - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role', [
            'current_user_id' => $currentUser->id,
            'current_user_name' => $currentUser->name,
            'target_user_id' => $user->id,
            'target_user_name' => $user->name,
            'old_roles' => $user->getRoleNames()->toArray(),
            'new_role' => $newRoleName
        ]);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        if ($currentUser->id === $user->id) {
            Log::warning('üö´ UserRoleController - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç role ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', [
                'user_id' => $currentUser->id
            ]);
            return back()->with('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç role ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° role
        if (!$this->canUserManageTarget($currentUser, $user, $newRoleName)) {
            Log::warning('üö´ UserRoleController - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user ‡∏ô‡∏µ‡πâ', [
                'current_user_roles' => $currentUser->getRoleNames()->toArray(),
                'target_user_roles' => $user->getRoleNames()->toArray(),
                'requested_role' => $newRoleName
            ]);
            return back()->with('error', '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ');
        }
        
        try {
            $oldRoles = $user->getRoleNames()->toArray();
            
            // ‡∏•‡∏ö role ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà role ‡πÉ‡∏´‡∏°‡πà
            if ($newRoleName) {
                $user->syncRoles([$newRoleName]);
                $message = "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏Ç‡∏≠‡∏á {$user->name} ‡πÄ‡∏õ‡πá‡∏ô {$newRoleName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß";
            } else {
                $user->syncRoles([]);
                $message = "‡∏•‡∏ö role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á {$user->name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß";
            }
            
            Log::info('‚úÖ UserRoleController - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', [
                'user_id' => $user->id,
                'user_name' => $user->name,
                'old_roles' => $oldRoles,
                'new_role' => $newRoleName,
                'updated_by' => $currentUser->name
            ]);
            
            return back()->with('success', $message);
            
        } catch (\Exception $e) {
            Log::error('‚ùå UserRoleController - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
    }
    
    /**
     * ‡∏•‡∏ö role ‡∏Ç‡∏≠‡∏á user (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
     */
    public function removeRole(User $user)
    {
        $currentUser = auth()->user();
        
        Log::info('üóëÔ∏è UserRoleController - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö role', [
            'current_user_id' => $currentUser->id,
            'current_user_name' => $currentUser->name,
            'target_user_id' => $user->id,
            'target_user_name' => $user->name,
            'target_current_roles' => $user->getRoleNames()->toArray()
        ]);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        if ($currentUser->id === $user->id) {
            Log::warning('üö´ UserRoleController - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö role ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á');
            return back()->with('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if (!$this->canUserManageTarget($currentUser, $user, null)) {
            Log::warning('üö´ UserRoleController - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö role ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ');
            return back()->with('error', '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ');
        }
        
        try {
            $oldRoles = $user->getRoleNames()->toArray();
            $user->syncRoles([]);
            
            Log::info('‚úÖ UserRoleController - ‡∏•‡∏ö role ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', [
                'user_id' => $user->id,
                'user_name' => $user->name,
                'removed_roles' => $oldRoles,
                'removed_by' => $currentUser->name
            ]);
            
            return back()->with('success', "‡∏•‡∏ö role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á {$user->name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
            
        } catch (\Exception $e) {
            Log::error('‚ùå UserRoleController - ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö role', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return back()->with('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö role ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á roles ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° permission ‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    private function getAvailableRoles()
    {
        $currentUser = auth()->user();
        
        Log::info('üìã UserRoleController - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ roles ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ', [
            'user_id' => $currentUser->id,
            'user_roles' => $currentUser->getRoleNames()->toArray()
        ]);
        
        if ($currentUser->hasRole('super admin')) {
            // Super admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ
            $roles = Role::orderBy('name')->get();
            Log::info('üëë UserRoleController - Super admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ');
            return $roles;
        }
        
        if ($currentUser->hasRole('admin')) {
            // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö role member ‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            $roles = Role::whereIn('name', ['member'])->orderBy('name')->get();
            Log::info('üîß UserRoleController - Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ role member');
            return $roles;
        }
        
        // User ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö role ‡πÑ‡∏î‡πâ
        Log::info('üö´ UserRoleController - User ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏°‡∏≠‡∏ö role ‡πÉ‡∏î‡πÜ');
        return collect([]);
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ target user ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    private function canUserManageTarget(User $currentUser, User $targetUser, ?string $newRole): bool
    {
        // Super admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        if ($currentUser->hasRole('super admin')) {
            return true;
        }
        
        // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
        if ($currentUser->hasRole('admin')) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            if ($currentUser->department !== $targetUser->department) {
                return false;
            }
            
            // Admin ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ super admin ‡∏´‡∏£‡∏∑‡∏≠ admin ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
            if ($targetUser->hasAnyRole(['super admin', 'admin'])) {
                return false;
            }
            
            // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ role member ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö role
            if ($newRole && !in_array($newRole, ['member'])) {
                return false;
            }
            
            return true;
        }
        
        // User ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
        return false;
    }
}
